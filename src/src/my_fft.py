"""
входные данные
x    - массив входных данных
step - шаг оцифровки (сек)
maxf - частота до которой нужно раскладывать в ряд Фурье
"""
import numpy as np


def my_fft(x, step, maxf):
    # проверка не выходит ли желаемая частота за пределы измеренной
    # из условия что для нормального разложения нужно 2 точки на период
    if maxf * 2 > step ** -1:
        maxf = step ** -1 / 2

    # ширина окна
    m = len(x)

    # разложение в ряд фурье
    y = np.fft.fft(x, m)

    #  полный диапазон частот
    f = []
    for i in range(m - 2):
        f.append(i / m * pow(step, -1))


    # амплитуды составляющих
    a = 2 * abs(y) / m
    a[0] = (y[0].real) / m

    # кол-во точек для вывода
    maxn = m * maxf / step ** -1

    freq = f[0:int(maxn)]
    ampl = a[0:int(maxn)]

    return freq, ampl
